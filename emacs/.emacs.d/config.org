* Before
  
** General

#+BEGIN_SRC emacs-lisp
  ;; disable startup message
  (setq inhibit-startup-message t)

  ;; hide toolbar in gui mode
  (tool-bar-mode -1)

  ;; (setq global-display-line-numbers-mode 1)
  ;; (setq-default display-line-numbers 'relative)

  (global-visual-line-mode t)
  
  ;; (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
 
  (linum-mode)
  (linum-relative-global-mode)
  (setq linum-relative-current-symbol "-")
#+END_SRC

** Theme - Gruvbox

#+BEGIN_SRC emacs-lisp
  (load-theme 'gruvbox t)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  ;; set font - Dank Mono - 11
  (set-frame-font "Dank Mono 11" nil t)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
(defun my-display-buffer-below (buffer alist)
"Doc-string."
  (let (
      (window
        (cond
          ((get-buffer-window buffer (selected-frame)))
          ((window-in-direction 'below))
          (t
            (split-window (selected-window) nil 'below)))))
    (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
    window))

(defun my-display-buffer-above (buffer alist)
"Doc-string."
  (let (
      (window
        (cond
          ((get-buffer-window buffer (selected-frame)))
          ((window-in-direction 'above))
          (t
            (split-window (selected-window) nil 'above)))))
    (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
    window))

(defun my-display-buffer-left (buffer alist)
"Doc-string."
  (let (
      (window
        (cond
          ((get-buffer-window buffer (selected-frame)))
          ((window-in-direction 'left))
          (t
            (split-window (selected-window) nil 'left)))))
    (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
    window))

(defun my-display-buffer-right (buffer alist)
"Doc-string."
  (let (
      (window
        (cond
          ((get-buffer-window buffer (selected-frame)))
          ((window-in-direction 'right))
          (t
            (split-window (selected-window) nil 'right)))))
    (window--display-buffer buffer window 'window alist display-buffer-mark-dedicated)
    window))

(defun dired-display-above ()
"Doc-string."
(interactive)
  (let* (
      (file-or-dir (dired-get-file-for-visit))
      (buffer (find-file-noselect file-or-dir)))
    (my-display-buffer-above buffer nil)))

(defun dired-display-below ()
"Doc-string."
(interactive)
  (let* (
      (file-or-dir (dired-get-file-for-visit))
      (buffer (find-file-noselect file-or-dir)))
    (my-display-buffer-below buffer nil)))

(defun dired-display-left ()
"Doc-string."
(interactive)
  (let* (
      (file-or-dir (dired-get-file-for-visit))
      (buffer (find-file-noselect file-or-dir)))
    (my-display-buffer-left buffer nil)))

(defun dired-display-right ()
"Doc-string."
(interactive)
  (let* (
      (file-or-dir (dired-get-file-for-visit))
      (buffer (find-file-noselect file-or-dir)))
    (my-display-buffer-right buffer nil)))
#+END_SRC

* Package - Evil

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (require 'evil)
  (evil-mode 1)
#+END_SRC

* Package - helm

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

* Package - Org Mode

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)

  (setq org-log-done t)

  (setq org-agenda-files (list "~/wkf-org/"))

  (require 'ob-elixir)
  (require 'ob-ipython)
  ;; Run/highlight code using babel in org-mode
  (org-babel-do-load-languages 'org-babel-load-languages '(
      (python . t) (ipython . t) (elixir . t) (shell . t) (typescript . t) (js . t) (plantuml . t)))

  ;; Syntax highlight in #+BEGIN_SRC blocks
  (setq org-src-fontify-natively t)
  ;; Don't prompt before running code in org
  (setq org-confirm-babel-evaluate nil)

  (setq org-plantuml-jar-path
	(expand-file-name "~/.emacs.d/contrib/plantuml/plantuml.jar"))

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;; (setq org-babel-python-command "python3")
  ;; (setq python-shell-interpreter "python3")
  ;; (setq exec-path (append exec-path '("/opt/local/bin")))
  ;; (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

* Package - Projectile

#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (setq projectile-project-search-path
  '("~/wkf-devbox/" "~/wkf-learn/" "~/wkf-org" "~/.emacs.d"))
#+END_SRC

* Package - wakatime mode

#+BEGIN_SRC emacs-lisp
  (global-wakatime-mode)
#+END_SRC

* Language - Ocaml

#+BEGIN_SRC emacs-lisp
  (add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
  (setq auto-mode-alist
      (append '(("\\.ml[ily]?$" . tuareg-mode)
		  ("\\.topml$" . tuareg-mode))
	      auto-mode-alist))
  (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
  (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
  (add-hook 'tuareg-mode-hook 'merlin-mode)
  (setq merlin-use-auto-complete-mode t)
  (setq merlin-error-after-save nil)


  ;; -- merlin setup ---------------------------------------

  (setq opam-share (substring (shell-command-to-string "opam config var share") 0 -1))
  (add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
  (require 'merlin)

  ;; Enable Merlin for ML buffers
  (add-hook 'tuareg-mode-hook 'merlin-mode)

  ;; So you can do it on a mac, where `C-<up>` and `C-<down>` are used
  ;; by spaces.
  (define-key merlin-mode-map
    (kbd "C-c <up>") 'merlin-type-enclosing-go-up)
  (define-key merlin-mode-map
    (kbd "C-c <down>") 'merlin-type-enclosing-go-down)
  (set-face-background 'merlin-type-face "#88FF44")

  (setq merlin-command "~/.opam/4.09.0/bin/ocamlmerlin")  ; needed only if ocamlmerlin not already in your PATH
  (autoload 'merlin-mode "merlin" "Merlin mode" t)
  (add-hook 'tuareg-mode-hook 'merlin-mode)
  (add-hook 'caml-mode-hook 'merlin-mode)

  ;; -- enable auto-complete -------------------------------
  ;; Not required, but useful along with merlin-mode
  (require 'auto-complete)
  (add-hook 'tuareg-mode-hook 'auto-complete-mode)

    ; Enable company-mode in Merlin buffers.

    ; Make company aware of Merlin.
    (eval-after-load 'company '(progn
    (add-to-list 'company-backends 'merlin-company-backend)
    ))
    ; Enable company on Merlin-managed buffers.
    (add-hook 'merlin-mode-hook 'company-mode)

    ; Start completion at 1 characters (instead of 3 by default).
    (setq company-minimum-prefix-length 1)
#+END_SRC
